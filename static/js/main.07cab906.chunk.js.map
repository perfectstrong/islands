{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["matrix","rows","cols","defaultValue","arr","i","push","Array","j","App","state","counting","lines","columns","map","numIsland","numMap","lock","groundPercentage","start","x","y","end","onChooseStartPoint","onChooseEndPoint","onFindingPath","minDist","shortestPath","toggleGroundSea","lineIndex","colIndex","setState","line","_lineIndex","cell","_colIndex","countIsland","startDiscover","console","log","length","expand","reset","randomlyGenerateGround","Math","random","toggleStartPoint","toggleEndPoint","findShortestPath","startFinding","className","Form","FormGroup","row","Button","color","onClick","this","disabled","value","placeholder","style","maxWidth","type","min","onChange","event","target","Label","max","step","Table","bordered","key","col","Spinner","distMat","Number","MAX_SAFE_INTEGER","visitMat","precedingMat","candidateNodes","currentNode","currentShortestDist","index","splice","nextNode","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07cab906.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'reactstrap/es/Button';\nimport Form from \"reactstrap/es/Form\";\nimport FormGroup from \"reactstrap/es/FormGroup\";\nimport Table from \"reactstrap/es/Table\";\nimport Spinner from \"reactstrap/es/Spinner\";\nimport Label from \"reactstrap/es/Label\";\n\nfunction matrix(rows, cols, defaultValue) {\n    const arr = [];\n    // Creates all lines:\n    for (let i = 0; i < rows; i++) {\n        // Creates an empty line\n        arr.push([]);\n        // Adds cols to the empty line:\n        arr[i].push(new Array(cols));\n        for (let j = 0; j < cols; j++) {\n            // Initializes:\n            arr[i][j] = defaultValue;\n        }\n    }\n    return arr;\n}\n\nclass App extends Component {\n    state = {\n        counting: false,\n        lines: 10,\n        columns: 10,\n        /**\n         * @type {boolean[][]}\n         */\n        map: matrix(10, 10, false),\n        numIsland: 0,\n        /**\n         * @type {number[][]}\n         */\n        numMap: matrix(10, 10, 0),\n        /**\n         * @type {boolean}\n         */\n        lock: false,\n        /**\n         * @type {number}\n         */\n        groundPercentage: 0.5,\n        /**\n         * @type {{x: number, y: number}}\n         */\n        start: {x: -1, y: -1},\n        /**\n         * @type {{x: number, y: number}}\n         */\n        end: {x: -1, y: -1},\n        onChooseStartPoint: false,\n        onChooseEndPoint: false,\n        onFindingPath: false,\n        minDist: -1,\n        /**\n         * @type {boolean[][]}\n         */\n        shortestPath: [[]],\n    };\n\n    render() {\n        return (\n            <div className=\"App d-flex flex-column justify-content-center align-items-center\">\n                <h1>Islands</h1>\n                <Form>\n                    <FormGroup row={true} className=\"d-flex justify-content-center\">\n                        <Button className=\"mr-2\" color=\"success\" onClick={this.countIsland}\n                                disabled={this.state.lock}>Count</Button>\n                        <Button color=\"danger\" onClick={this.reset} disabled={this.state.lock}>Reset</Button>\n                    </FormGroup>\n                    <FormGroup row={true} className=\"d-flex justify-content-center\">\n                        <input value={this.state.lines} placeholder={\"Lines\"}\n                               className=\"d-inline-block form-control form-control-sm mr-2\"\n                               style={{\n                                   maxWidth: \"100px\"\n                               }}\n                               type={\"number\"}\n                               min={0}\n                               onChange={event =>\n                                   !this.state.counting &&\n                                   this.setState({\n                                       lines: event.target.value,\n                                       map: matrix(event.target.value, this.state.columns, false),\n                                       numMap: matrix(event.target.value, this.state.columns, 0),\n                                   })}/>\n                        {\" x \"}\n                        <input value={this.state.columns} placeholder={\"Columns\"}\n                               type={\"number\"}\n                               className=\"d-inline-block form-control form-control-sm ml-2\"\n                               style={{\n                                   maxWidth: \"100px\"\n                               }}\n                               min={0}\n                               onChange={event =>\n                                   !this.state.counting &&\n                                   this.setState({\n                                       columns: event.target.value,\n                                       map: matrix(this.state.lines, event.target.value, false),\n                                       numMap: matrix(event.target.value, this.state.columns, 0),\n                                   })}/>\n                    </FormGroup>\n                    <FormGroup row={true} className=\"d-flex justify-content-center align-items-center\">\n                        <Label className=\"mr-2\">Ground percentage :</Label>\n                        <input value={this.state.groundPercentage} placeholder={\"Ground percentage\"}\n                               type={\"number\"}\n                               className=\"d-inline-block form-control form-control-sm w-auto mr-2\"\n                               min={0} max={1} step={0.01}\n                               style={{\n                                   maxWidth: \"100px\"\n                               }}\n                               onChange={event =>\n                                   !this.state.counting &&\n                                   this.setState({\n                                       groundPercentage: event.target.value,\n                                   })}/>\n                        <Button color=\"warning\" onClick={this.randomlyGenerateGround}\n                                disabled={this.state.lock}>Random</Button>\n                    </FormGroup>\n                    <FormGroup row={true} className=\"d-flex justify-content-center align-items-center\">\n                        <Button onClick={() => this.setState({onChooseStartPoint: !this.state.onChooseStartPoint})}\n                                className=\"mr-2\">Choose start point</Button>\n                        <Button onClick={() => this.setState({onChooseEndPoint: !this.state.onChooseEndPoint})}\n                                className=\"mr-2\">Choose end point</Button>\n                        <Button onClick={this.findShortestPath}>Find shortest path</Button>\n                    </FormGroup>\n                </Form>\n                {\n                    this.state.lines > 0 && this.state.columns > 0 &&\n                    <Table bordered={true} className=\"w-auto\" key={this.state.lines + \" \" + this.state.columns}>\n                        <tbody>\n                        {\n                            this.state.map.map((line, lineIndex) => <tr key={lineIndex}>\n                                {\n                                    line.map((col, colIndex) =>\n                                        <td key={colIndex}\n                                            onClick={() =>\n                                                this.state.onChooseStartPoint ?\n                                                    this.toggleStartPoint(lineIndex, colIndex) :\n                                                    this.state.onChooseEndPoint ?\n                                                        this.toggleEndPoint(lineIndex, colIndex) :\n                                                        this.toggleGroundSea(lineIndex, colIndex)}\n                                            className={col ? \"ground\" :\n                                                this.state.minDist > 0 && this.state.shortestPath[lineIndex][colIndex] ?\n                                                    \"sea-shortest\" : \"sea\"\n                                            }>\n                                            {this.state.start.x === lineIndex && this.state.start.y === colIndex ? \"S\" :\n                                                this.state.end.x === lineIndex && this.state.end.y === colIndex ? \"E\" :\n                                                    this.state.numMap[lineIndex] &&\n                                                    this.state.numMap[lineIndex][colIndex] > 0 ?\n                                                        this.state.numMap[lineIndex][colIndex] : \"\"}\n                                        </td>)\n                                }\n                            </tr>)\n                        }\n                        </tbody>\n                    </Table>\n                }\n                {\n                    (this.state.counting || this.state.onFindingPath) && <Spinner color=\"primary\"/>\n                }\n                <p>Total islands : {this.state.numIsland}</p>\n                <p>Shortest path: {this.state.minDist}</p>\n            </div>\n        );\n    }\n\n    toggleGroundSea = (lineIndex, colIndex) =>\n        !this.state.lock &&\n        this.setState({\n            map: this.state.map.map((line, _lineIndex) => {\n                if (_lineIndex !== lineIndex)\n                    return line;\n                else\n                    return line.map((cell, _colIndex) => {\n                        if (_colIndex !== colIndex)\n                            return cell;\n                        else\n                            return !cell;\n                    });\n            })\n        });\n\n    countIsland = () =>\n        !this.state.counting &&\n        this.setState({\n            counting: true,\n            numIsland: 0,\n            lock: true,\n        }, this.startDiscover);\n\n    /**\n     *\n     * @type {number[][]}\n     */\n    numMap = [[]];\n\n    numIsland = 0;\n\n    startDiscover = () => {\n        this.numMap = matrix(this.state.lines, this.state.columns, 0);\n        this.numIsland = 0;\n        console.log(\"Starting discovering\");\n        for (let i = 0; i < this.numMap.length; i++) {\n            for (let j = 0; j < this.numMap[i].length; j++) {\n                if (this.state.map[i][j] && this.numMap[i][j] === 0) {\n                    // Undiscovered land\n                    this.numIsland++;\n                    this.expand(i, j, this.numIsland);\n                }\n            }\n        }\n        console.log(\"Discover terminated\");\n        this.setState({\n            counting: false,\n            numIsland: this.numIsland,\n            numMap: this.numMap,\n            lock: false,\n        });\n    };\n\n    expand(line, col, numIsland) {\n        this.numMap[line][col] = numIsland;\n        console.log(line + \" \" + col + \" \" + numIsland);\n        line - 1 >= 0 && this.state.map[line - 1][col] && this.numMap[line - 1][col] === 0 && this.expand(line - 1, col, numIsland);\n        line + 1 < this.numMap.length && this.state.map[line + 1][col] && this.numMap[line + 1][col] === 0 && this.expand(line + 1, col, numIsland);\n        col - 1 >= 0 && this.state.map[line][col - 1] && this.numMap[line][col - 1] === 0 && this.expand(line, col - 1, numIsland);\n        col + 1 < this.numMap[0].length && this.state.map[line][col + 1] && this.numMap[line][col + 1] === 0 && this.expand(line, col + 1, numIsland);\n    }\n\n    reset = () =>\n        this.setState({\n            counting: false,\n            lock: false,\n            lines: 10,\n            columns: 10,\n            map: matrix(10, 10, false),\n            numMap: matrix(10, 10, 0),\n            numIsland: 0,\n            start: {x: -1, y: -1},\n            end: {x: -1, y: -1},\n            onChooseStartPoint: false,\n            onChooseEndPoint: false,\n            onFindingPath: false,\n            minDist: -1,\n            shortestPath: [[]]\n        });\n\n    randomlyGenerateGround = () => !this.state.lock &&\n        this.setState({\n            counting: false,\n            lock: false,\n            numIsland: 0,\n            map: this.state.map.map((line, lineIndex) => line.map((cell, colIndex) =>\n                (lineIndex === this.state.start.x && colIndex === this.state.start.y)\n                || (lineIndex === this.state.end.x && colIndex === this.state.end.y) ?\n                    false : Math.random() < this.state.groundPercentage)),\n            onChooseStartPoint: false,\n            onChooseEndPoint: false,\n            onFindingPath: false,\n            minDist: -1,\n            shortestPath: [[]],\n        });\n\n    toggleStartPoint = (lineIndex, colIndex) =>\n        this.setState({\n            onChooseStartPoint: false,\n            start: lineIndex === this.state.start.x && colIndex === this.state.start.y ? {x: -1, y: -1} :\n                (lineIndex === this.state.end.x && colIndex === this.state.end.y)\n                || this.state.map[lineIndex][colIndex] ? this.state.start :\n                    {x: lineIndex, y: colIndex},\n        });\n\n    toggleEndPoint = (lineIndex, colIndex) =>\n        this.setState({\n            onChooseEndPoint: false,\n            end: lineIndex === this.state.end.x && colIndex === this.state.end.y ? {x: -1, y: -1} :\n                (lineIndex === this.state.start.x && colIndex === this.state.start.y)\n                || this.state.map[lineIndex][colIndex] ? this.state.end :\n                    {x: lineIndex, y: colIndex},\n        });\n\n    findShortestPath = () =>\n        this.state.start.x >= 0 && this.state.start.y >= 0 && this.state.end.x >= 0 && this.state.end.y >= 0 &&\n        this.setState({\n            onFindingPath: true,\n            lock: true,\n        }, this.startFinding);\n\n    startFinding() {\n        console.log(\"Start finding shortest path\");\n        let distMat = matrix(this.state.lines, this.state.columns, Number.MAX_SAFE_INTEGER);\n        distMat[this.state.start.x][this.state.start.y] = 0;\n        let visitMat = matrix(this.state.lines, this.state.columns, false);\n        let precedingMat = matrix(this.state.lines, this.state.columns, null);\n        let candidateNodes = []; // Initial candidates\n        let currentNode = this.state.start;\n        while (currentNode) {\n            visitMat[currentNode.x][currentNode.y] = true;\n            if (visitMat[this.state.end.x][this.state.end.y]) break;\n            // Check if neighbor nodes exist\n            // If new proposal dist is smaller, refresh distMat value\n            // If node not visited, add to candidates\n            if (currentNode.x - 1 >= 0 && !this.state.map[currentNode.x - 1][currentNode.y]\n                && !visitMat[currentNode.x - 1][currentNode.y]) {\n                candidateNodes.push({x: currentNode.x - 1, y: currentNode.y});\n                if (distMat[currentNode.x][currentNode.y] + 1 <= distMat[currentNode.x - 1][currentNode.y]) {\n                    distMat[currentNode.x - 1][currentNode.y] = distMat[currentNode.x][currentNode.y] + 1;\n                    precedingMat[currentNode.x - 1][currentNode.y] = currentNode;\n                }\n            }\n            if (currentNode.x + 1 < this.state.lines && !this.state.map[currentNode.x + 1][currentNode.y]\n                && !visitMat[currentNode.x + 1][currentNode.y]) {\n                candidateNodes.push({x: currentNode.x + 1, y: currentNode.y});\n                if (distMat[currentNode.x][currentNode.y] + 1 <= distMat[currentNode.x + 1][currentNode.y]) {\n                    distMat[currentNode.x + 1][currentNode.y] = distMat[currentNode.x][currentNode.y] + 1;\n                    precedingMat[currentNode.x + 1][currentNode.y] = currentNode;\n                }\n            }\n            if (currentNode.y - 1 >= 0 && !this.state.map[currentNode.x][currentNode.y - 1]\n                && !visitMat[currentNode.x][currentNode.y - 1]) {\n                candidateNodes.push({x: currentNode.x, y: currentNode.y - 1});\n                if (distMat[currentNode.x][currentNode.y] + 1 <= distMat[currentNode.x][currentNode.y - 1]) {\n                    distMat[currentNode.x][currentNode.y - 1] = distMat[currentNode.x][currentNode.y] + 1;\n                    precedingMat[currentNode.x][currentNode.y - 1] = currentNode;\n                }\n            }\n            if (currentNode.y + 1 < this.state.columns && !this.state.map[currentNode.x][currentNode.y + 1]\n                && !visitMat[currentNode.x][currentNode.y + 1]) {\n                candidateNodes.push({x: currentNode.x, y: currentNode.y + 1});\n                if (distMat[currentNode.x][currentNode.y] + 1 <= distMat[currentNode.x][currentNode.y + 1]) {\n                    distMat[currentNode.x][currentNode.y + 1] = distMat[currentNode.x][currentNode.y] + 1;\n                    precedingMat[currentNode.x][currentNode.y + 1] = currentNode;\n                }\n            }\n            // Sort to get the next nearest node\n            let currentShortestDist = Number.MAX_SAFE_INTEGER;\n            let index = -1;\n            for (let i = 0; i < candidateNodes.length; i++) {\n                if (distMat[candidateNodes[i].x][candidateNodes[i].y] < currentShortestDist) {\n                    index = i;\n                    currentShortestDist = distMat[candidateNodes[i].x][candidateNodes[i].y];\n                }\n            }\n            if (index < 0) // No connection\n                break;\n            else {\n                currentNode = candidateNodes[index];\n                candidateNodes.splice(index, 1);\n            }\n        }\n        // If cannot visit the end point, that means no path exists\n        console.log(\"Terminating finding the shortest path\");\n        if (!visitMat[this.state.end.x][this.state.end.y]) {\n            this.setState({\n                onFindingPath: false,\n                lock: false,\n                minDist: -1,\n                shortestPath: [[]]\n            });\n        } else {\n            // Highlight the path\n            let shortestPath = matrix(this.state.lines, this.state.columns, false);\n            let nextNode = this.state.end;\n            while (nextNode !== null) {\n                console.log(nextNode.x + \" \" + nextNode.y);\n                shortestPath[nextNode.x][nextNode.y] = true;\n                nextNode = precedingMat[nextNode.x][nextNode.y];\n            }\n            this.setState({\n                onFindingPath: false,\n                lock: false,\n                minDist: distMat[this.state.end.x][this.state.end.y],\n                shortestPath,\n            });\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}